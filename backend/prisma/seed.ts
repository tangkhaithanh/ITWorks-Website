import { PrismaClient, Role, CompanyStatus, EmploymentType } from '@prisma/client';
import { faker } from '@faker-js/faker';
import { Client } from '@elastic/elasticsearch';
import { ElasticsearchJobService } from '../src/modules/elasticsearch/job.elasticsearch.service';

const prisma = new PrismaClient();

// ‚úÖ T·∫°o client ES th·∫≠t
const es = new Client({ node: process.env.ELASTICSEARCH_NODE || 'http://localhost:9200' });
const esJob = new ElasticsearchJobService(es);

// =======================
// Config constants
// =======================
const cities = [
  { city: 'TP.HCM', district: 'Qu·∫≠n 1', ward: 'Ph∆∞·ªùng ƒêa Kao', lat: 10.7769, lon: 106.7009 },
  { city: 'H√† N·ªôi', district: 'C·∫ßu Gi·∫•y', ward: 'D·ªãch V·ªçng H·∫≠u', lat: 21.0285, lon: 105.804 },
  { city: 'ƒê√† N·∫µng', district: 'H·∫£i Ch√¢u', ward: 'Th·∫°ch Thang', lat: 16.0471, lon: 108.206 },
];

const jobTemplates = [
  { title: 'Frontend Developer (ReactJS)', category: 'Frontend Developer', skills: ['React', 'JavaScript', 'TypeScript'] },
  { title: 'Backend Developer (Node.js, NestJS)', category: 'Backend Developer', skills: ['Node.js', 'NestJS', 'MySQL'] },
  { title: 'Fullstack Developer', category: 'Fullstack Developer', skills: ['React', 'Node.js', 'MySQL', 'Docker'] },
  { title: 'DevOps Engineer', category: 'DevOps Engineer', skills: ['Docker', 'AWS', 'GCP'] },
  { title: 'Mobile Developer (Flutter)', category: 'Mobile Developer', skills: ['Flutter', 'Kotlin'] },
  { title: 'QA Engineer', category: 'QA Engineer', skills: ['Jest', 'Cypress', 'Git'] },
];

async function main() {
console.log('üöÄ B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu...');
await esJob.createIndexIfNotExists();


  // 1Ô∏è‚É£ Clear d·ªØ li·ªáu c≈© (theo th·ª© t·ª± tr√°nh l·ªói FK)
await prisma.jobSkill.deleteMany();
await prisma.jobDetail.deleteMany();
await prisma.job.deleteMany();

await prisma.companySkill.deleteMany();
await prisma.companyIndustry.deleteMany();
await prisma.company.deleteMany();

await prisma.candidateSkill?.deleteMany?.().catch(() => {}); // n·∫øu c√≥
await prisma.candidate?.deleteMany?.().catch(() => {});      // n·∫øu c√≥
await prisma.user?.deleteMany?.().catch(() => {});           // n·∫øu c√≥

await prisma.skill.deleteMany();
await prisma.jobCategory.deleteMany();
await prisma.industry.deleteMany();

await prisma.account.deleteMany(); // ‚¨ÖÔ∏è X√≥a Account cu·ªëi c√πn

  // 2Ô∏è‚É£ Accounts
  const recruiters = await Promise.all(
    Array.from({ length: 3 }).map((_, i) =>
      prisma.account.create({
        data: {
          email: `recruiter${i + 1}@example.com`,
          password: 'hashed_password',
          role: Role.recruiter,
        },
      }),
    ),
  );

  await Promise.all(
    Array.from({ length: 6 }).map((_, i) =>
      prisma.account.create({
        data: {
          email: `candidate${i + 1}@example.com`,
          password: 'hashed_password',
          role: Role.candidate,
        },
      }),
    ),
  );

  await prisma.account.create({
    data: { email: 'admin@example.com', password: 'hashed_password', role: Role.admin },
  });

  // 3Ô∏è‚É£ Industries, Skills, Categories
  await prisma.industry.createMany({
    data: [
      { name: 'Software Development' },
      { name: 'Fintech' },
      { name: 'E-commerce' },
      { name: 'Edtech' },
      { name: 'AI & Data' },
    ],
  });

  await prisma.skill.createMany({
  data: [
    { name: 'JavaScript' },
    { name: 'TypeScript' },
    { name: 'React' },
    { name: 'Node.js' },
    { name: 'NestJS' },
    { name: 'MySQL' },
    { name: 'Docker' },
    { name: 'AWS' },
    { name: 'Python' },
    { name: 'Django' },
    { name: 'Java' },
    { name: 'Spring' },
    { name: 'Flutter' },
    { name: 'Kotlin' },
    { name: 'GCP' },
    { name: 'Git' },
    { name: 'Jest' },
    { name: 'Cypress' },
    { name: 'Dart' },
  ],
});

  await prisma.jobCategory.createMany({
    data: [
      { name: 'Frontend Developer' },
      { name: 'Backend Developer' },
      { name: 'Fullstack Developer' },
      { name: 'DevOps Engineer' },
      { name: 'Mobile Developer' },
      { name: 'QA Engineer' },
    ],
  });

  const allSkills = await prisma.skill.findMany();
  const allCategories = await prisma.jobCategory.findMany();
  const allIndustries = await prisma.industry.findMany();

  // 4Ô∏è‚É£ Companies
  const companies = [
    {
      account: recruiters[0],
      name: 'TechVision JSC',
      headquarters: 'TP.HCM',
      industry: allIndustries.find((i) => i.name === 'Software Development')!,
      tech: ['Node.js', 'NestJS', 'React'],
    },
    {
      account: recruiters[1],
      name: 'FinMate Co.',
      headquarters: 'H√† N·ªôi',
      industry: allIndustries.find((i) => i.name === 'Fintech')!,
      tech: ['Java', 'Spring', 'AWS'],
    },
    {
      account: recruiters[2],
      name: 'EduNext Ltd.',
      headquarters: 'ƒê√† N·∫µng',
      industry: allIndustries.find((i) => i.name === 'Edtech')!,
      tech: ['Python', 'Django', 'React', 'GCP'],
    },
  ];

  const createdCompanies: any[] = [];
  for (const c of companies) {
    const company = await prisma.company.create({
      data: {
        account_id: c.account.id,
        name: c.name,
        logo_url: 'https://res.cloudinary.com/demo/image/upload/v1690000000/sample.jpg',
        logo_public_id: 'companies/logos/sample',
        website: faker.internet.url(),
        description: faker.company.catchPhrase(),
        headquarters: c.headquarters,
        address: faker.location.streetAddress(),
        size: faker.helpers.arrayElement(['small', 'medium', 'large']),
        status: CompanyStatus.approved,
        contact_email: faker.internet.email(),
        contact_phone: faker.phone.number(),
        industry_info: { create: [{ industry_id: c.industry.id }] },
        skills: {
          create: c.tech.map((t) => ({
            skill_id: allSkills.find((s) => s.name === t)!.id,
          })),
        },
      },
    });
    createdCompanies.push(company);
  }

  // 5Ô∏è‚É£ Jobs
  const jobs: any[] = [];
  for (const company of createdCompanies) {
    for (let i = 0; i < 20; i++) {
      const tmpl = faker.helpers.arrayElement(jobTemplates);
      const city = faker.helpers.arrayElement(cities);

      // üí∞ Salary VN (tri·ªáu ƒë·ªìng)
      const expLevel = faker.helpers.arrayElement(['fresher', 'junior', 'mid', 'senior', 'lead']);
      const ranges: Record<string, [number, number]> = {
        fresher: [8, 15],
        junior: [15, 25],
        mid: [25, 40],
        senior: [40, 60],
        lead: [60, 90],
      };
      const [min, max] = ranges[expLevel];
      const salary_min = faker.number.float({ min, max: max - 3, multipleOf: 0.1 });
      const salary_max = faker.number.float({ min: salary_min + 1, max, multipleOf: 0.1 });

      const job = await prisma.job.create({
      data: {
        company_id: company.id,
        category_id: allCategories.find((c) => c.name === tmpl.category)!.id,
        title: tmpl.title,
        salary_min,
        salary_max,
        negotiable: faker.datatype.boolean(),
        location_city: city.city,
        location_district: city.district,
        location_ward: city.ward,
        location_street: faker.location.street(),
        location_full: `${city.city}, ${city.district}, ${city.ward}`,
        latitude: city.lat,
        longitude: city.lon,

        // ‚úÖ JSON chu·∫©n
        work_modes: faker.helpers.arrayElements(['onsite', 'remote', 'hybrid'], 1),
        experience_levels: [expLevel],
        employment_type: faker.helpers.arrayElement(Object.values(EmploymentType)),

        status: 'active',
        deadline: faker.date.soon({ days: faker.number.int({ min: 10, max: 60 }) }),

        details: {
          create: {
            description: faker.helpers.arrayElement([
              'Tham gia ph√°t tri·ªÉn v√† b·∫£o tr√¨ h·ªá th·ªëng web hi·ªán ƒë·∫°i.',
              'X√¢y d·ª±ng REST API b·∫±ng NestJS v√† MySQL.',
              'T·ªëi ∆∞u hi·ªáu nƒÉng backend, ƒë·∫£m b·∫£o b·∫£o m·∫≠t d·ªØ li·ªáu.',
            ]),
            requirements: faker.helpers.arrayElement([
              '- C√≥ √≠t nh·∫•t 1 nƒÉm kinh nghi·ªám v·ªõi JavaScript / TypeScript.\n- K·ªπ nƒÉng teamwork t·ªët.\n- ∆Øu ti√™n bi·∫øt Docker ho·∫∑c AWS.',
              '- T·ªët nghi·ªáp ng√†nh CNTT ho·∫∑c li√™n quan.\n- C√≥ tinh th·∫ßn h·ªçc h·ªèi v√† tr√°ch nhi·ªám trong c√¥ng vi·ªác.',
            ]),
          },
        },

        skills: {
          create: faker.helpers
            .arrayElements(tmpl.skills, faker.number.int({ min: 2, max: tmpl.skills.length }))
            .map((s) => {
              const skill = allSkills.find((sk) => sk.name === s);
              return skill ? { skill_id: skill.id } : undefined;
            })
            .filter(Boolean),
        },
      } as any,
      include: {
        company: {
          include: {
            industry_info: { include: { industry: true } },
            skills: { include: { skill: true } },
          },
        },
        category: true,
        details: true,
        skills: { include: { skill: true } },
      },
    });
          // ‚úÖ Index v√†o Elasticsearch
          await esJob.indexJob(job);
          jobs.push(job);
        }
      }

  console.log(`‚úÖ Seed th√†nh c√¥ng ${jobs.length} job.`);
  console.table(jobs.slice(0, 5).map((j) => ({ id: j.id, title: j.title, city: j.location_city })));
}

main()
  .catch((e) => {
    console.error('‚ùå L·ªói seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
