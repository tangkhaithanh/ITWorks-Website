import { useEffect, useState } from "react";
import TextInput from "@/components/ui/TextInput";
import SelectInput from "@/components/ui/SelectInput";
import Button from "@/components/ui/Button";
import ApplicationAPI from "@/features/applications/ApplicationAPI";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";

const MySwal = withReactContent(Swal);

export default function CvManagementPage() {
  const [filters, setFilters] = useState({
    search: "",
    jobId: "",
    status: "",
  });

  const [applications, setApplications] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(false);
  const [actionLoading, setActionLoading] = useState(null); // id ƒëang x·ª≠ l√Ω accept/reject

  // üß© H√†m g·ªçi API l·∫•y danh s√°ch ·ª©ng vi√™n
  const fetchData = async (params = {}) => {
    try {
      setLoading(true);
      const res = await ApplicationAPI.getByCompany({
        page: 1,
        limit: 10,
        search: filters.search || undefined,
        jobId: filters.jobId || undefined,
        status: filters.status || undefined,
        ...params,
      });

      const data = res.data?.data || {};
      setApplications(data.items || []);
      setTotal(data.total || 0);
    } catch (err) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch ·ª©ng vi√™n:", err);
    } finally {
      setLoading(false);
    }
  };

  // üß† Khi dropdown (jobId, status) thay ƒë·ªïi ‚Üí auto g·ªçi API
  useEffect(() => {
    if (filters.jobId !== "" || filters.status !== "") {
      fetchData();
    }
  }, [filters.jobId, filters.status]);

  // üì¶ H√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  // üéØ Khi nh·∫•n n√∫t T√¨m ki·∫øm ho·∫∑c Enter trong textbox
  const handleSearch = (e) => {
    if (!e || e.key === "Enter") {
      fetchData();
    }
  };

  // üß© Khi nh·∫•n ch·∫•p nh·∫≠n / t·ª´ ch·ªëi
  const handleAction = async (id, action) => {
    const actionText = action === "accept" ? "ch·∫•p nh·∫≠n" : "t·ª´ ch·ªëi";
    try {
      const confirm = await MySwal.fire({
        title: `X√°c nh·∫≠n ${actionText}?`,
        text: `B·∫°n c√≥ ch·∫Øc mu·ªën ${actionText} ƒë∆°n ·ª©ng tuy·ªÉn n√†y kh√¥ng?`,
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "C√≥",
        cancelButtonText: "H·ªßy",
        confirmButtonColor: action === "accept" ? "#16a34a" : "#dc2626",
      });
      if (!confirm.isConfirmed) return;

      setActionLoading(id);

      if (action === "accept") {
        await ApplicationAPI.accept(id);
      } else {
        await ApplicationAPI.reject(id);
      }

      await MySwal.fire({
        title: "Th√†nh c√¥ng!",
        text: `ƒê√£ ${actionText} ƒë∆°n ·ª©ng tuy·ªÉn.`,
        icon: "success",
        confirmButtonText: "OK",
        confirmButtonColor: "#2563eb",
      });

      fetchData();
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      MySwal.fire({
        title: "L·ªói!",
        text: err.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.",
        icon: "error",
        confirmButtonText: "ƒê√≥ng",
      });
    } finally {
      setActionLoading(null);
    }
  };

  // üîπ Load l·∫ßn ƒë·∫ßu
  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-2xl p-6 shadow-md border border-slate-100">
        <h1 className="text-2xl font-bold text-slate-800 mb-6">
          Qu·∫£n l√Ω CV ·ª©ng vi√™n
        </h1>

        {/* B·ªô l·ªçc */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* √î t√¨m ki·∫øm */}
          <div onKeyDown={handleSearch}>
            <TextInput
              name="search"
              placeholder="T√¨m ki·∫øm t√™n, email, s·ªë ƒëi·ªán tho·∫°i"
              value={filters.search}
              onChange={handleChange}
            />
          </div>

          {/* Dropdown ch·ªçn c√¥ng vi·ªác */}
          <SelectInput
            name="jobId"
            value={filters.jobId}
            onChange={handleChange}
            placeholder="Ch·ªçn c√¥ng vi·ªác"
            options={[
              { value: "", label: "T·∫•t c·∫£ c√¥ng vi·ªác" },
              { value: "41", label: "Mobile Developer (Flutter)" },
              { value: "42", label: "Backend Developer" },
            ]}
          />

          {/* Dropdown tr·∫°ng th√°i */}
          <SelectInput
            name="status"
            value={filters.status}
            onChange={handleChange}
            placeholder="Tr·∫°ng th√°i"
            options={[
              { value: "", label: "T·∫•t c·∫£ tr·∫°ng th√°i" },
              { value: "pending", label: "ƒêang ch·ªù" },
              { value: "accepted", label: "ƒê√£ ch·∫•p nh·∫≠n" },
              { value: "rejected", label: "ƒê√£ t·ª´ ch·ªëi" },
            ]}
          />
        </div>

        {/* N√∫t t√¨m ki·∫øm */}
        <div className="flex justify-end mt-4">
          <Button onClick={() => fetchData()} size="sm" variant="primary">
            T√¨m ki·∫øm
          </Button>
        </div>
      </div>

      {/* K·∫øt qu·∫£ */}
      <div className="bg-white rounded-2xl p-6 shadow-md border border-slate-100">
        <p className="font-medium text-slate-700 mb-4">
          T√¨m th·∫•y{" "}
          <span className="font-semibold text-blue-600">{total}</span>{" "}
          ·ª©ng vi√™n
        </p>

        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr className="bg-slate-100 text-slate-700 text-sm font-semibold">
                <th className="p-3 text-left rounded-l-lg">·ª®ng vi√™n</th>
                <th className="p-3 text-left">T√™n job</th>
                <th className="p-3 text-left">Th√¥ng tin li√™n h·ªá</th>
                <th className="p-3 text-center">Tr·∫°ng th√°i</th>
                <th className="p-3 text-center rounded-r-lg">Thao t√°c</th>
              </tr>
            </thead>

            <tbody>
              {loading ? (
                <tr>
                  <td colSpan="5" className="text-center py-6 text-slate-500">
                    ƒêang t·∫£i d·ªØ li·ªáu...
                  </td>
                </tr>
              ) : applications.length === 0 ? (
                <tr>
                  <td colSpan="5" className="text-center py-6 text-slate-500">
                    Kh√¥ng c√≥ d·ªØ li·ªáu
                  </td>
                </tr>
              ) : (
                applications.map((item) => {
                  const isActionDisabled =
                    item.status !== "pending" || actionLoading === item.id;

                  return (
                    <tr
                      key={item.id}
                      className="border-b border-slate-100 hover:bg-slate-50 transition"
                    >
                      {/* ·ª®ng vi√™n */}
                      <td className="p-3">
                        <div className="flex items-center gap-3">
                          <img
                            src={
                              item.candidate?.user?.avatar_url ||
                              "https://i.pravatar.cc/100"
                            }
                            alt="avatar"
                            className="w-10 h-10 rounded-full object-cover"
                          />
                          <span className="font-medium text-slate-800">
                            {item.candidate?.user?.full_name || "Ch∆∞a c√≥ t√™n"}
                          </span>
                        </div>
                      </td>

                      {/* T√™n job */}
                      <td className="p-3 text-slate-700">
                        {item.job?.title || "‚Äî"}
                      </td>

                      {/* Li√™n h·ªá */}
                      <td className="p-3 text-slate-700">
                        <div className="flex flex-col">
                          <span>{item.candidate?.user?.account?.email}</span>
                          <span>{item.candidate?.user?.phone}</span>
                        </div>
                      </td>

                      {/* Tr·∫°ng th√°i */}
                      <td className="p-3 text-center">
                        <span
                          className={`px-3 py-1 rounded-full text-sm font-semibold capitalize ${
                            item.status === "accepted"
                              ? "bg-green-100 text-green-700"
                              : item.status === "rejected"
                              ? "bg-rose-100 text-rose-700"
                              : "bg-yellow-100 text-yellow-700"
                          }`}
                        >
                          {item.status === "accepted"
                            ? "ƒê√£ ch·∫•p nh·∫≠n"
                            : item.status === "rejected"
                            ? "ƒê√£ t·ª´ ch·ªëi"
                            : "ƒêang ch·ªù"}
                        </span>
                      </td>

                      {/* Thao t√°c */}
                      <td className="p-3 text-center space-x-2">
                        <Button
                          size="sm"
                          variant="green"
                          onClick={() => handleAction(item.id, "accept")}
                          disabled={isActionDisabled}
                          className={
                            item.status !== "pending"
                              ? "opacity-60 cursor-not-allowed"
                              : ""
                          }
                        >
                          {actionLoading === item.id
                            ? "ƒêang x·ª≠ l√Ω..."
                            : "Ch·∫•p nh·∫≠n"}
                        </Button>

                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleAction(item.id, "reject")}
                          disabled={isActionDisabled}
                          className={
                            item.status !== "pending"
                              ? "opacity-60 cursor-not-allowed"
                              : ""
                          }
                        >
                          {actionLoading === item.id ? "..." : "T·ª´ ch·ªëi"}
                        </Button>
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
